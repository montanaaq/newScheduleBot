import hashlib
import time
from pprint import pprint

import apiclient.discovery  # type: ignore
import httplib2
from oauth2client.service_account import ServiceAccountCredentials

# –§–∞–π–ª, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ Google Developer Console
CREDENTIALS_FILE = 'creds.json'
# ID Google Sheets –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ –µ–≥–æ URL)
spreadsheet_id = '1tL5zZM2ytn7u7WgEqQHNWaOkRU_jQb7er14d4v_sy_Q'

# –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∏ –ø–æ–ª—É—á–∞–µ–º service ‚Äî —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–æ—Å—Ç—É–ø–∞ –∫ API
credentials = ServiceAccountCredentials.from_json_keyfile_name(
    CREDENTIALS_FILE,
    ['https://www.googleapis.com/auth/spreadsheets',
     'https://www.googleapis.com/auth/drive'])
httpAuth = credentials.authorize(httplib2.Http())
service = apiclient.discovery.build('sheets', 'v4', http=httpAuth)


async def read_from_sheets(range_of_read: str, type_of_dimension: str):
    values = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range=range_of_read,
        majorDimension=type_of_dimension
    ).execute()
    return values


async def parse_schedule(data, classes):
    schedule = {}
    current_day = None
    lesson_count = 0  # –°—á–µ—Ç—á–∏–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è

    for row in data.get('values', []):
        if not row:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            continue

        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥–Ω—è –Ω–µ–¥–µ–ª–∏, —ç—Ç–æ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        if row[0].strip() in ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]:
            current_day = row[0].strip()
            schedule[current_day] = {class_name: [] for class_name in classes}
            lesson_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
            continue

        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å —É—Ä–æ–∫–∞–º–∏
        if current_day:
            for i, class_name in enumerate(classes):
                if i + 1 >= len(row):  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç
                    schedule[current_day][class_name].append(
                        {'–ø—Ä–µ–¥–º–µ—Ç': None, '–∫–∞–±–∏–Ω–µ—Ç': None})
                else:
                    lesson_str = row[i + 1].strip()
                    if not lesson_str:  # –ï—Å–ª–∏ —É—Ä–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                        schedule[current_day][class_name].append(
                            {'–ø—Ä–µ–¥–º–µ—Ç': None, '–∫–∞–±–∏–Ω–µ—Ç': None})
                    else:
                        # –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏ –∫–∞–±–∏–Ω–µ—Ç
                        if ' (' in lesson_str and lesson_str.endswith(')'):
                            subject_part, room_part = lesson_str.rsplit(
                                ' (', 1)
                            subject = subject_part.strip()
                            # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
                            room = room_part[:-1].strip()
                        else:
                            subject = lesson_str
                            room = None
                        schedule[current_day][class_name].append(
                            {'–ø—Ä–µ–¥–º–µ—Ç': subject, '–∫–∞–±–∏–Ω–µ—Ç': room})
            lesson_count += 1

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Ä–æ–≤–Ω–æ 7 —É—Ä–æ–∫–æ–≤
    for day in schedule:
        for class_name in schedule[day]:
            while len(schedule[day][class_name]) < 7:
                schedule[day][class_name].append(
                    {'–ø—Ä–µ–¥–º–µ—Ç': None, '–∫–∞–±–∏–Ω–µ—Ç': None})

    return schedule


async def get_data_hash(data):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à-—Å—É–º–º—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π)."""
    data_str = str(data)
    return hashlib.md5(data_str.encode()).hexdigest()


async def get_schedule_start():
    global classes
    # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (B1:E1)
    class_data = await read_from_sheets('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!B1:E1', 'ROWS')
    classes = [class_name.strip() for class_name in class_data['values'][0]]

    # –ß–∏—Ç–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    data = await read_from_sheets(range_of_read="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!A2:E", type_of_dimension="ROWS")
    schedule = await parse_schedule(data, classes)
    return schedule


async def get_teachers_from_sheets():
    teacher_data = await read_from_sheets('–£—á–∏—Ç–µ–ª—è!A:B', 'ROWS')
    return teacher_data


async def format_teachers_list():
    """–ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π –∏–∑ Google Sheets."""
    teacher_data = await get_teachers_from_sheets()
    if 'values' not in teacher_data:
        return "‚ùå –°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω."

    teachers_list = 'üë®‚Äçüè´ <b>–°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π:</b>\n'
    teachers_list += '‚Äî' * 20 + '\n'

    for row in teacher_data['values']:
        if len(row) < 2:
            continue
        subject, teacher_name = row
        teachers_list += f"üë®‚Äçüè´ <b>{subject}</b>\n<code>{teacher_name}</code>\n"
        teachers_list += '‚Äî' * 20 + '\n'

    return teachers_list

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import asyncio

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
    asyncio.run(get_schedule_start())  # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

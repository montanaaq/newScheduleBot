async def return_schedule(schedule_data: dict, requested_day: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–ª—è Telegram."""

    if not schedule_data:
        return "‚ùå –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –≤—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å —Å –ø–æ–º–æ—â—å—é /start."

    days = {
        "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "wednesday": "–°—Ä–µ–¥–∞",
        "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "saturday": "–°—É–±–±–æ—Ç–∞",
        "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }

    def format_day(day_name: str, lessons: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏."""
        if not lessons:
            return f"üìÖ <b>{day_name}</b>\n<i>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.</i>"

        header = f"üìÖ <b>{day_name}</b>\n"
        table_header = "<b>‚Ññ | –ü—Ä–µ–¥–º–µ—Ç</b>\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
        schedule_body = ""

        for i, lesson in enumerate(lessons):
            lesson_number = str(i + 1).rjust(2)
            subject = lesson[1]  # –°–æ–¥–µ—Ä–∂–∏—Ç –∏ –ø—Ä–µ–¥–º–µ—Ç, –∏ –∫–∞–±–∏–Ω–µ—Ç

            schedule_body += f"<b>{lesson_number}</b> | {subject}\n"

        return f"{header}<pre>{table_header}{schedule_body}</pre>"

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if requested_day == 'full':
        return "\n\n".join(format_day(day, lessons) for day, lessons in schedule_data.items())

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ–Ω—å (—á–∏—Å–ª–æ) –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    day_name = days.get(requested_day)

    if day_name and day_name in schedule_data:
        return format_day(day_name, schedule_data[day_name])

    return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏."